/*
 Leaflet.BigImage (https://github.com/pasichnykvasyl/Leaflet.BigImage).
 (c) 2020, Vasyl Pasichnyk, pasichnykvasyl (Oswald)
*/
!(function (t, e) {
    "function" == typeof define && define.amd
        ? define(["leaflet"], t)
        : "object" == typeof exports && (module.exports = t(require("leaflet"))),
        void 0 !== e && e.L && (e.L.YourPlugin = t(L));
})(function (t) {
    (t.Control.BigImage = t.Control.extend({
        onAdd: function (t) {
            this._map = t;
            return (
                this._createControl(this._print, this)
            );
        },
        _createControl: function (o, s) {
            (this._container = document.createElement("div")),
                (this._container.id = "print-container"),
                this._container.classList.add("leaflet-bar"),
                this._container.addEventListener("wheel", t.DomEvent.stop);

            return (
                this._createControlPanel(s, o),
                this._container
            );
        },
        _createControlPanel: function (i, s) {
            let a = document.createElement("a");
            (a.innerHTML = "Button"),
                (a.style.width = "100%"),
                (a.style.padding = "0px 10px"),

                (a.id = "print-btn"),
                t.DomEvent.on(a, "click", s, i),
                this._container.appendChild(a);
        },
        _getLayers: function (e) {
            let i = this,
                n = [];
            i._map.eachLayer(function (e) {
                n.push(
                    new Promise((n) => {
                        try {
                            e instanceof t.TileLayer
                                ? i._getTileLayer(e, n)
                                : n();
                        } catch (t) {
                            console.log(t), n();
                        }
                    })
                );
            }),
                Promise.all(n).then(() => {
                    e();
                });
        },
        _getTileLayer: function (e, i) {
            let n = this;
            (n.tiles = []),
                (n.tileSize = e._tileSize.x),
                (n.tileBounds = t.bounds(
                    n.bounds.min.divideBy(n.tileSize)._floor(),
                    n.bounds.max.divideBy(n.tileSize)._floor()
                ));
            for (let e = n.tileBounds.min.y; e <= n.tileBounds.max.y; e++)
                for (let i = n.tileBounds.min.x; i <= n.tileBounds.max.x; i++)
                    n.tiles.push(new t.Point(i, e));
            let o = [];
            n.tiles.forEach((i) => {
                let s = i.clone();
                e._adjustTilePoint && e._adjustTilePoint(i);
                let a = s
                    .scaleBy(new t.Point(n.tileSize, n.tileSize))
                    .subtract(n.bounds.min);
                i.y < 0 ||
                    o.push(
                        new Promise((t) => {
                            n._loadTile(i, a, e, t);
                        })
                    );
            }),
                Promise.all(o).then(() => {
                    i();
                });
        },
        _loadTile: function (t, e, i, n) {
            let o = this,
                s = t.x + ":" + t.y + ":" + o.zoom,
                a = new Image();
            (a.crossOrigin = "Anonymous"),
                (a.onload = function () {
                    o.tilesImgs[s] || (o.tilesImgs[s] = { img: a, x: e.x, y: e.y }), n();
                }),
                (a.src = i.getTileUrl(t));
        },
        _print: function () {
            let t = this;
            t.tilesImgs = {};
            let e = t._map.getSize();
            (t.zoom = t._map.getZoom()),
                (t.bounds = t._map.getPixelBounds()),
                (t.canvas = document.createElement("canvas")),
                (t.canvas.width = e.x),
                (t.canvas.height = e.y),
                (t.ctx = t.canvas.getContext("2d")),
                new Promise(function (e, i) {
                    t._getLayers(e);
                })
                    .then(
                        () =>
                            new Promise((e, i) => {
                                for (const [e, i] of Object.entries(t.tilesImgs))
                                    t.ctx.drawImage(i.img, i.x, i.y, t.tileSize, t.tileSize);
                                e();
                            })
                    )
                    .then(() => {
                        t.canvas.toBlob(function (t) {
                            let e = document.createElement("a");
                            (e.download = "bigImage.png"),
                                (e.href = URL.createObjectURL(t)),
                                e.click();
                        }),
                            t._containerParams.classList.remove("print-disabled"),
                            (t._loader.style.display = "none");
                    });
        },
    })),
        (t.control.bigImage = function (e) {
            return new t.Control.BigImage(e);
        });
}, window);
